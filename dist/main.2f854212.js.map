{"version":3,"sources":["main.js"],"names":["log","console","bind","e","selector","document","querySelector","canvas","ctx","getContext","eraserEnabled","drawing","lastPoint","x","undefined","y","setCanvasSize","pageWidth","documentElement","clientWidth","pageHeight","clientHeight","width","height","autoCanvasSize","window","addEventListener","drawCircle","radius","beginPath","arc","Math","PI","fill","drawLine","x1","y1","x2","y2","lineWidth","moveTo","lineTo","stroke","closePath","listenToMouse","clientX","clientY","clearRect","newPoint","listenToTouch","touches","changeButton","eraser","brush","old","classList","remove","add","setPencilColor","color","strokeStyle","fillStyle","__main","body","ontouchstart"],"mappings":"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","file":"main.2f854212.js","sourceRoot":"..","sourcesContent":["const log = console.log.bind(console);\n\nconst e = selector => document.querySelector(selector);\nconst canvas = e(\"#canvas\");\nconst ctx = canvas.getContext(\"2d\");\nlet eraserEnabled = false;\nlet drawing = false;\nlet lastPoint = {\n  x: undefined,\n  y: undefined\n};\n\nconst setCanvasSize = () => {\n  const pageWidth = document.documentElement.clientWidth;\n  const pageHeight = document.documentElement.clientHeight;\n  canvas.width = pageWidth;\n  canvas.height = pageHeight;\n};\n\nconst autoCanvasSize = () => {\n  setCanvasSize();\n  window.addEventListener(\"resize\", () => {\n    setCanvasSize();\n  });\n};\n\nconst drawCircle = (x, y, radius) => {\n  ctx.beginPath();\n  ctx.arc(x, y, radius, 0, Math.PI * 2, false);\n  ctx.fill();\n};\n\nconst drawLine = (x1, y1, x2, y2) => {\n  ctx.lineWidth = 5;\n  ctx.beginPath();\n  ctx.moveTo(x1, y1);\n  ctx.lineTo(x2, y2);\n  ctx.stroke();\n  ctx.closePath();\n};\n\nconst listenToMouse = () => {\n  canvas.addEventListener(\"mousedown\", e => {\n    drawing = true;\n    const x = e.clientX;\n    const y = e.clientY;\n    lastPoint.x = x;\n    lastPoint.y = y;\n    const radius = 2;\n    if (eraserEnabled) {\n      ctx.clearRect(x - 5, y - 5, 10, 10);\n    } else {\n      drawCircle(x, y, radius);\n    }\n  });\n  canvas.addEventListener(\"mousemove\", e => {\n    if (drawing !== true) {\n      return;\n    }\n    const x = e.clientX;\n    const y = e.clientY;\n    if (eraserEnabled) {\n      ctx.clearRect(x - 5, y - 5, 10, 10);\n    } else {\n      const newPoint = { x, y };\n      drawLine(lastPoint.x, lastPoint.y, newPoint.x, newPoint.y);\n      lastPoint = newPoint;\n      const radius = 2;\n      drawCircle(x, y, radius);\n    }\n  });\n  canvas.addEventListener(\"mouseup\", e => {\n    drawing = false;\n  });\n};\n\nconst listenToTouch = () => {\n  canvas.addEventListener(\"touchstart\", e => {\n    log(\"touch start\");\n    drawing = true;\n    const x = e.touches[0].clientX;\n    const y = e.touches[0].clientY;\n    lastPoint.x = x;\n    lastPoint.y = y;\n    const radius = 2;\n    if (eraserEnabled) {\n      ctx.clearRect(x - 5, y - 5, 10, 10);\n    } else {\n      drawCircle(x, y, radius);\n    }\n  });\n  canvas.addEventListener(\"touchmove\", e => {\n    if (drawing !== true) {\n      return;\n    }\n    const x = e.touches[0].clientX;\n    const y = e.touches[0].clientY;\n    if (eraserEnabled) {\n      ctx.clearRect(x - 5, y - 5, 10, 10);\n    } else {\n      const newPoint = { x, y };\n      drawLine(lastPoint.x, lastPoint.y, newPoint.x, newPoint.y);\n      lastPoint = newPoint;\n      const radius = 2;\n      drawCircle(x, y, radius);\n    }\n  });\n  canvas.addEventListener(\"touchend\", e => {\n    log(\"touch end\");\n    drawing = false;\n  });\n};\n\nconst changeButton = () => {\n  let eraser = e(\".eraser\");\n  let brush = e(\".brush\");\n  eraser.addEventListener(\"click\", () => {\n    log(\"eraser clicked\");\n    eraserEnabled = !eraserEnabled;\n    log(\"eraser\", eraserEnabled);\n    let old = e(\".active\");\n    if (old) {\n      old.classList.remove(\"active\");\n    }\n    brush.classList.add(\"active\");\n  });\n  brush.addEventListener(\"click\", () => {\n    eraserEnabled = !eraserEnabled;\n    let old = e(\".active\");\n    if (old) {\n      old.classList.remove(\"active\");\n    }\n    eraser.classList.add(\"active\");\n  });\n};\n// const listenToEraser = () => {};\n\n// const listenToBrush = () => {};\n\nconst setPencilColor = color => {\n  ctx.strokeStyle = color;\n  ctx.fillStyle = color;\n};\n\nconst __main = () => {\n  // 设置画布大小\n  autoCanvasSize();\n  // 设置画笔颜色 (调整 canvas 画布会清空上下文的设置，比如颜色)\n  setPencilColor(\"red\");\n  // 监听事件\n  if (document.body.ontouchstart === undefined) {\n    listenToMouse();\n  } else {\n    listenToTouch();\n  }\n\n  changeButton();\n};\n__main();\n"]}